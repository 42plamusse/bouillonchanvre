@page "/admin/products/create"
@page "/admin/products/edit/{ProductID:int}"
@using BouillonChanvre.Models
@using BouillonChanvre.Services
@using System.ComponentModel.DataAnnotations
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>@(isEditMode ? "Modifier le produit" : "Cr√©er un produit")</h3>

<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Nom du produit</label>
        <InputText class="form-control" @bind-Value="@product.ProductName" />
        <ValidationMessage For="@(() => product.ProductName)" />
    </div>
    <CategorySelector SelectedId="@product.CategoryID" OnSelectedIdChanged="OnCategoryChanged" />

    @if (product.CategoryID != null)
    {
        <SubCategorySelector SelectedId="@product.SubCategoryID" OnSelectedIdChanged="OnSubCategoryChanged"
            CategoryId="@product.CategoryID" />
    }

    <ProductVariantTabs Variants="@product.Variants" />

    <button type="submit" class="btn btn-primary">Enregistrer le produit</button>
</EditForm>

@code {
    private Product product = new Product();
    private List<ValidationResult> validationResults = new List<ValidationResult>();
    private bool isEditMode;
    private EditContext editContext;

    [Parameter] public int? ProductID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProductID.HasValue)
        {
            isEditMode = true;

            product = await ProductService.GetProductById(ProductID.Value);

            if (product == null)
            {
                NavigationManager.NavigateTo("/products");
            }
        }
        else
        {
            isEditMode = false;
            product = new Product();
        }

        // Create EditContext for the product
        editContext = new EditContext(product);
    }

    private void OnCategoryChanged(int? id)
    {
        product.CategoryID = id ?? null;
        product.SubCategoryID = null;
        StateHasChanged();
    }

    private void OnSubCategoryChanged(int? id)
    {
        product.SubCategoryID = id ?? null;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Submitting");

        if (ProductService.ValidateProduct(product, out validationResults))
        {
            // Validation failed, inform Blazor about the validation errors
            foreach (var validationResult in validationResults)
            {
                Console.WriteLine(validationResult.ErrorMessage);

            }

            if (isEditMode)
            {
                await ProductService.UpdateProduct(product);
            }
            else
            {
                await ProductService.CreateProduct(product);
            }

            NavigationManager.NavigateTo("/admin/products");
        }
        else
        {
            // Validation failed, inform Blazor about the validation errors
            foreach (var validationResult in validationResults)
            {
                // Add validation errors to ModelState to be displayed in ValidationSummary
                foreach (var memberName in validationResult.MemberNames)
                {
                    var fieldIdentifier = new FieldIdentifier(product, memberName);
                    editContext.NotifyFieldChanged(fieldIdentifier);
                }
            }
        }
    }
}
