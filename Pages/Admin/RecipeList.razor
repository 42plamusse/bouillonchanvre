@page "/admin/recipes"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using BouillonChanvre.Models

<h3>Manage Recipes</h3>

<button @onclick="CreateNewRecipe">Create New Recipe</button>

@if (isConfirmDeleteVisible)
{
    <div class="modal">
        <div class="modal-content">
            <p>Are you sure you want to delete this recipe?</p>
            <button @onclick="ConfirmDelete">Yes</button>
            <button @onclick="CancelDelete">No</button>
        </div>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var recipe in recipes)
        {
            <tr>
                <td>@recipe.Title</td>
                <td>@recipe.Description</td>
                <td>
                    <button @onclick="() => EditRecipe(recipe.Id)">Edit</button>
                    <button @onclick="() => ShowDeleteConfirmation(recipe.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Recipe> recipes = new List<Recipe>();
    private bool isConfirmDeleteVisible = false;
    private int recipeIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        recipes = await Http.GetFromJsonAsync<List<Recipe>>("api/recipes");
    }

    private void CreateNewRecipe()
    {
        NavigationManager.NavigateTo("/admin/recipes/create");
    }

    private void EditRecipe(int id)
    {
        NavigationManager.NavigateTo($"/admin/recipes/edit/{id}");
    }

    private void ShowDeleteConfirmation(int id)
    {
        recipeIdToDelete = id;
        isConfirmDeleteVisible = true;
    }

    private async Task ConfirmDelete()
    {
        isConfirmDeleteVisible = false;
        await Http.DeleteAsync($"api/recipes/{recipeIdToDelete}");
        recipes = await Http.GetFromJsonAsync<List<Recipe>>("api/recipes");
    }

    private void CancelDelete()
    {
        isConfirmDeleteVisible = false;
    }
}

