@using BouillonChanvre.Models
@using MudBlazor
@using BouillonChanvre.Services
@inject IProductService ProductService
@inject IBlobStorageService BlobStorageService

<MudStack Row Class="py-3">
    <MudText Typo="Typo.h5">Variantes</MudText>

    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewVariant" Variant="Variant.Filled">Ajouter
    </MudButton>
</MudStack>

<MudTabs @bind-ActivePanelIndex="SelectedVariantIndex">
    @foreach (var variant in Variants)
    {
        <MudTabPanel Text="@GetVariantDisplayText(variant)">
            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-2">Images de la variante</MudText>
                    <MudText Typo="Typo.body2" Class="mb-1">Taille maximale des fichiers : 10MB</MudText>

                    <!-- Image Upload Button -->
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".png, .jpg, .jpeg"
                        FilesChanged="@(async (files) => await UploadFiles(files, variant))" MaximumFileCount="10" 
                        MaxFileSize="10485760">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                StartIcon="@Icons.Material.Filled.CloudUpload">
                                Ajouter des images
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>

                    <!-- Display added images as thumbnails -->
                    @if (variant.Images?.Any() == true)
                    {
                        <MudStack Row="false" Class="mt-4" Spacing="2">
                            @foreach (var image in variant.Images.OrderBy(i => i.Order))
                            {
                                <MudPaper Class="image-container">
                                    <MudImage Src="@image.ImageUrl" Alt="Image" Width="100" Height="100" />
                                    <MudStack Row Justify="Justify.Center">
                                        <!-- Remove Image Button -->
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                            OnClick="() => RemoveImage(variant, image)" />
                                        <!-- Sorting Icons -->
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                                            OnClick="() => MoveImageUp(variant, image)" Disabled="@IsFirstImage(variant, image)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                                            OnClick="() => MoveImageDown(variant, image)" Disabled="@IsLastImage(variant, image)" />
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                </MudCardContent>
            </MudCard>

            <!-- Variant details and other information below -->
            <div class="form-group">
                <!-- Variant Name and Reference on the same row -->
                <MudGrid Class="py-4">
                    <MudItem sm="6">
                        <MudTextField Label="Nom de la variante (optionnel)" @bind-Value="@variant.VariantName" />
                    </MudItem>
                    <MudItem sm="4">
                        <MudTextField Label="Référence" @bind-Value="variant.Reference" />
                    </MudItem>
                </MudGrid>

                <!-- Size and Unit -->
                <MudGrid Class="py-4">
                    <MudItem sm="2">
                        <MudNumericField @bind-Value="variant.Size" Label="Taille" />
                    </MudItem>
                    <MudItem sm="1">
                        <MudSelect T="SizeUnit" @bind-Value="variant.SizeUnit" Label="Unité">
                            @foreach (SizeUnit sizeUnit in Enum.GetValues(typeof(SizeUnit)))
                            {
                                <MudSelectItem Value="@sizeUnit">@sizeUnit</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <!-- CBD Concentration and Price on the same row -->
                <MudGrid Class="py-4">
                    <MudItem sm="6">
                        <MudTextField Label="Concentration de CBD" @bind-Value="variant.CBDConcentration" />
                    </MudItem>
                </MudGrid>

                <!-- Stock on its own row -->
                <MudGrid Class="py-4">
                    <MudItem sm="2">
                        <MudNumericField @bind-Value="variant.Price" Label="Prix (euro)" />
                    </MudItem>
                    <MudItem sm="2">
                        <MudNumericField @bind-Value="variant.Stock" Label="Stock" />
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />

                <MudText Typo="Typo.h6">Informations</MudText>
                <MudGrid Class="py-2">
                    <MudItem xs="12">
                        <MudTextField Label="Sous-titre" @bind-Value="variant.Description.Subtitle" />
                    </MudItem>
                </MudGrid>
                <MudGrid Class="py-2">
                    <MudItem xs="12">
                        <MudTextField Label="Slogan" @bind-Value="variant.Description.Slogan" />
                    </MudItem>
                </MudGrid>
                <MudPaper Elevation="3" Class="m-4 p-4">
                    <MudText Typo="Typo.body1" Class="pb-3"><strong>Utilisez Markdown pour ajouter des liens et formater le
                            texte :</strong> </MudText>
                    <MudText Typo="Typo.body2">
                        <ul>
                            <li><strong>Ajouter des liens :</strong> Utilisez le format :
                                <code>[Texte du lien](http://example.com)</code>.
                            </li>
                            <li><strong>Texte en gras :</strong> Utilisez <code>**Texte en gras**</code>.</li>
                            <li><strong>Texte en italique :</strong> Utilisez <code>*Texte en italique*</code>.</li>
                        </ul>
                    </MudText>
                </MudPaper>

                <MudGrid Class="py-4">
                    <MudItem sm="12">
                        <MudTextField Variant="Variant.Outlined" AutoGrow Label="Description détaillée"
                            @bind-Value="variant.Description.Description" Multiline="true" Lines="10" />
                    </MudItem>
                </MudGrid>
                <MudGrid Class="py-4">
                    <MudItem sm="12">
                        <MudTextField Variant="Variant.Outlined" AutoGrow Label="Ingrédients"
                            @bind-Value="variant.Description.Ingredients" Multiline="true" Lines="10" />
                    </MudItem>
                </MudGrid>
                <MudGrid Class="py-4">
                    <MudItem sm="12">
                        <MudTextField Variant="Variant.Outlined" AutoGrow Label="Bénéfices"
                            @bind-Value="variant.Description.Benefits" Multiline="true" Lines="10" />
                    </MudItem>
                </MudGrid>
                <MudGrid Class="py-4">
                    <MudItem sm="12">
                        <MudTextField Variant="Variant.Outlined" AutoGrow Label="Instructions d'utilisation"
                            @bind-Value="variant.Description.UsageInstructions" Multiline="true" Lines="10" />
                    </MudItem>
                </MudGrid>
                <MudGrid Class="py-4">
                    <MudItem sm="12">
                        <MudTextField Variant="Variant.Outlined" AutoGrow Label="Informations sur le producteur"
                            @bind-Value="variant.Description.ProducerInformation" Multiline="true" Lines="10" />
                    </MudItem>
                </MudGrid>

                <MudStack Row Class="p-3" Justify="Justify.FlexEnd">
                    <MudButton Class="" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                        OnClick="RemoveVariant" Variant="Variant.Filled">Supprimer</MudButton>
                </MudStack>
            </div>
        </MudTabPanel>
    }
    </MudTabs>

    @code {
    [Parameter] public ICollection<ProductVariant> Variants { get; set; }
    private int SelectedVariantIndex { get; set; }

    protected override void OnInitialized()
    {
        if (Variants.Any())
        {
            SelectedVariantIndex = 0; // Select the first variant by default
        }
        else
        {
            AddNewVariant();
        }
    }

    private void AddNewVariant()
    {
        var newVariant = new ProductVariant
            {
                VariantName = "Variante",
                Description = new ProductDescription(),
                Images = new List<ProductImage>() // Ensure Images is initialized
            };

        Variants.Add(newVariant);
        SelectedVariantIndex = Variants.Count - 1; // Select the newly added variant
    }

    private void RemoveVariant()
    {
        if (SelectedVariantIndex >= 0 && SelectedVariantIndex < Variants.Count)
        {
            var variantToRemove = Variants.ElementAt(SelectedVariantIndex);
            ProductService.DeleteProductVariant(variantToRemove.ProductVariantID);
            Variants.Remove(variantToRemove);

            if (Variants.Any())
            {
                SelectedVariantIndex = Math.Min(SelectedVariantIndex, Variants.Count - 1);
            }
            else
            {
                SelectedVariantIndex = 0;
            }
        }
    }

    private string GetVariantDisplayText(ProductVariant variant)
    {
        if (variant == null)
            return string.Empty;

        string variantName = !string.IsNullOrWhiteSpace(variant.VariantName) ? variant.VariantName + " " : "";
        string size = variant.Size.HasValue && variant.Size.Value > 0 ? variant.Size.Value.ToString() : "";
        string sizeUnit = !string.IsNullOrEmpty(size) ? variant.SizeUnit.ToString() : "";
        return $"{variantName}{size}{sizeUnit}";
    }

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files, ProductVariant variant)
    {
        int currentOrder = variant.Images.Count;
        foreach (var file in files)
        {
            var fileUrl = await BlobStorageService.UploadFileAsync("product-images", file);
            var productImage = new ProductImage
                {
                    ImageUrl = fileUrl,
                    ProductVariantID = variant.ProductVariantID,
                    ProductVariant = variant,
                    Order = currentOrder++ // Set initial order for the image
                };
            variant.Images.Add(productImage);
        }
    }

    private void RemoveImage(ProductVariant variant, ProductImage image)
    {
        variant.Images.Remove(image);
        UpdateImageOrder(variant); // Reassign the Order after removal
        ProductService.DeleteProductVariantImage(image.ProductImageID);
    }

    private bool IsFirstImage(ProductVariant variant, ProductImage image)
    {
        return variant.Images.OrderBy(i => i.Order).First() == image;
    }

    private bool IsLastImage(ProductVariant variant, ProductImage image)
    {
        return variant.Images.OrderBy(i => i.Order).Last() == image;
    }

    private void MoveImageUp(ProductVariant variant, ProductImage image)
    {
        var imagesList = variant.Images.OrderBy(i => i.Order).ToList();
        var index = imagesList.IndexOf(image);
        if (index > 0)
        {
            var previousImage = imagesList[index - 1];
            imagesList[index - 1] = image;
            imagesList[index] = previousImage;

            imagesList[index - 1].Order = index - 1;
            imagesList[index].Order = index;

            variant.Images = imagesList.OrderBy(i => i.Order).ToList();
        }
    }

    private void MoveImageDown(ProductVariant variant, ProductImage image)
    {
        var imagesList = variant.Images.OrderBy(i => i.Order).ToList();
        var index = imagesList.IndexOf(image);
        if (index < imagesList.Count - 1)
        {
            var nextImage = imagesList[index + 1];
            imagesList[index + 1] = image;
            imagesList[index] = nextImage;

            imagesList[index + 1].Order = index + 1;
            imagesList[index].Order = index;

            variant.Images = imagesList.OrderBy(i => i.Order).ToList();
        }
    }

    private void UpdateImageOrder(ProductVariant variant)
    {
        var orderedImages = variant.Images.OrderBy(i => i.Order).ToList();
        for (int i = 0; i < orderedImages.Count; i++)
        {
            orderedImages[i].Order = i;
        }
    }
}
