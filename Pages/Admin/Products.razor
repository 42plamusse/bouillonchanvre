@page "/admin/products"
@using BouillonChanvre.Models
@using BouillonChanvre.Services
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<MudStack Row Class="py-3">
    <MudText Typo="Typo.h4" Align="Align.Left">Produits</MudText>
    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@CreateNewProduct" Variant="Variant.Filled">Nouveau
    </MudButton>
</MudStack>
<MudDataGrid Items="@products" Filterable="false" SortMode="@SortMode.None" Groupable="false" Loading="@isLoading"
    EmptyDataContent="No products available.">
    <Columns>
        <PropertyColumn Property="x => x.ProductName" Title="Nom" />
        <PropertyColumn Property="x => x.Category.Name" Title="Catégorie" />
        <PropertyColumn Property="x => x.Subcategory.Name" Title="Sous-catégorie" />
        <TemplateColumn Title="Variantes">
            <CellTemplate Context="productContext">
                @if (productContext.Item.Variants?.Count > 0)
                {
                    foreach (var variant in productContext.Item.Variants)
                    {
                        <MudText>@variant.Reference - @(string.IsNullOrWhiteSpace(variant.VariantName) ? ""
                    :
                    variant.VariantName)
                            (@variant.Size@variant.SizeUnit) : @variant.Price €</MudText>
                    }
                }
                else
                {
                    <MudText>No Variants</MudText>
                }
            </CellTemplate>

        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <CellTemplate Context="productContext">
                <MudButton OnClick="@(() => EditProduct(productContext.Item.ProductID))" Variant="Variant.Filled">Edit
                </MudButton>
                <MudButton OnClick="@(() => DeleteProduct(productContext.Item.ProductID))" Variant="Variant.Outlined"
                    Color="Color.Error">Delete</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private List<Product> products;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProductService.GetAllProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateNewProduct()
    {
        NavigationManager.NavigateTo("/admin/products/create");
    }

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/admin/products/edit/{productId}");
    }

    private async Task DeleteProduct(int productId)
    {
        await ProductService.DeleteProduct(productId);
        products = await ProductService.GetAllProducts();
    }
}
