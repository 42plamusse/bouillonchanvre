@page "/admin/products/create"
@page "/admin/products/edit/{ProductID:int}"
@using BouillonChanvre.Models
@using BouillonChanvre.Services
@using System.ComponentModel.DataAnnotations
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>@(isEditMode ? "Modifier le produit" : "Créer un produit")</h3>

@if (editContext != null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <!-- Basic Info Card -->
    <MudCard Class="my-3">
        <MudCardContent>
            <MudText Typo="Typo.h6">Informations de base</MudText>

            <MudTextField Label="Nom du produit" @bind-Value="@product.ProductName" Required="true" />
            <ValidationMessage For="@(() => product.ProductName)" />
        </MudCardContent>
    </MudCard>

    <!-- Category Card -->
    <MudCard Class="my-3">
        <MudCardContent>
            <MudText Typo="Typo.h6">Catégories</MudText>

            <CategorySelector SelectedId="@product.CategoryID" OnSelectedIdChanged="OnCategoryChanged" />
            @if (product.CategoryID != null)
                {
                    <SubCategorySelector SelectedId="@product.SubCategoryID" OnSelectedIdChanged="OnSubCategoryChanged"
                        CategoryId="@product.CategoryID" />
                }
            </MudCardContent>
        </MudCard>

        <!-- Variants Card -->
        <MudCard Class="my-3">
            <MudCardContent>
                <ProductVariantTabs Variants="@product.Variants" />
            </MudCardContent>
        </MudCard>

        <ValidationSummary />
        <!-- Submit Button -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
            Enregistrer le produit
        </MudButton>
    </EditForm>
}
else
{
    <MudText Typo="Typo.body1">Loading...</MudText>
}

@code {
    private Product product = new Product();
    private List<ValidationResult> validationResults = new List<ValidationResult>();
    private bool isEditMode;
    private EditContext editContext;

    [Parameter] public int? ProductID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProductID.HasValue)
        {
            isEditMode = true;

            product = await ProductService.GetProductById(ProductID.Value);

            if (product == null)
            {
                NavigationManager.NavigateTo("/products");
            }
        }
        else
        {
            isEditMode = false;
            product = new Product();
        }

        // Create EditContext for the product
        editContext = new EditContext(product);
    }

    private void OnCategoryChanged(int? id)
    {
        product.CategoryID = id ?? null;
        product.SubCategoryID = null;
        StateHasChanged();
    }

    private void OnSubCategoryChanged(int? id)
    {
        product.SubCategoryID = id ?? null;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Submitting");

        if (ProductService.ValidateProduct(product, out validationResults))
        {
            if (isEditMode)
            {
                await ProductService.UpdateProduct(product);
            }
            else
            {
                await ProductService.CreateProduct(product);
            }

            NavigationManager.NavigateTo("/admin/products");
        }
        else
        {
            // Validation failed, inform Blazor about the validation errors
            foreach (var validationResult in validationResults)
            {
                foreach (var memberName in validationResult.MemberNames)
                {
                    var fieldIdentifier = new FieldIdentifier(product, memberName);
                    editContext.NotifyFieldChanged(fieldIdentifier);
                }
            }
        }
    }
}
